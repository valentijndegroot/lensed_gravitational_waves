#We import packages to make the visualisations and make the layout conform to Latex
import csv 
import pandas as pd
import numpy as np
import matplotlib
import math
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
from matplotlib import rcParams
rcParams['text.usetex'] = True
rcParams['text.latex.preamble'] = [r'\usepackage{amsmath}']
rcParams['font.family'] = 'sans-serif'
import matplotlib.font_manager as font_manager
from matplotlib.ticker import FormatStrFormatter
from tkinter import *
from matplotlib.ticker import MaxNLocator
from matplotlib.ticker import StrMethodFormatter
%matplotlib qt


#The input data is a series of gravitational waves, either unlensed or lensed. Gravitational wave data is presented in the frequency domain from 0 to 1024 Hz
#in steps of 0.125 Hz. The frequecies of the plus and cross polarisations are used as input. We first load the frequency files and then visualise them.

hc_unlensed = pd.read_csv (r'...\Data\hc_unlensed.csv')
hp_unlensed = pd.read_csv (r'...\Data\hp_unlensed.csv')

#We make the polarisations complex and add them to get one frequency strain of the wave. We visualise it for a specific wave (here i=13). With a loop you can 
#visualise it and save it for all the waves.

hc_unlensed = hc_unlensed.applymap(complex)
hp_unlensed = hp_unlensed.applymap(complex)

i = 13
h_unlensed = hp_unlensed.loc[i] - hc_unlensed.loc[i]*(0+1j)
h_unlensed = np.array(h_unlensed)

#We visualise it in the frequency domain

freq = np.linspace(0, 1024, 8193) 
time = np.linspace(0,8,8193)

fig = plt.figure(1)
ax1 = fig.add_subplot()
plt.plot(freq, np.real(h_unlensed))
ax1.set_ylabel(r'$\mathrm{strain}\, h$',fontsize=60)
ax1.set_xlabel(r'$\mathrm{frequency}\, [Hz]$',fontsize=60)
ax1.yaxis.get_offset_text().set_fontsize(60)
ax1.tick_params(axis='both',  labelsize=60)
ax1.yaxis.set_major_locator(MaxNLocator(nbins = 3))
ax1.set_xticks(np.linspace(min(freq), math.floor(max(freq)), 5))

#We visualise it in the time domain. For this we perform inverse Fourier transform (constant q-transform is usual for gravitational waves, but here the time interval
#is large enough to se Fourier transform). A window is applied to remove the spike at t=0, which is a relic of the periodicity of the Fourier transform and that the 
#wave is simulated till the merging peak.

h_unlensedtime = np.fft.ifft(h_unlensed, norm = "ortho")

tau =0.05
window = (1-np.exp(-time/tau))

h_unlensedtime_window = h_unlensedtime.real*window

fig = plt.figure(1)
ax = fig.add_subplot()
plt.plot(time,h_unlensedtime_window.real)
ax.set_xlabel(r'$\mathrm{time}\, [s]$',fontsize=60)
ax.set_ylabel(r'$\mathrm{strain}\, h$',fontsize=60)
ax.yaxis.get_offset_text().set_fontsize(60)
ax.tick_params(axis='both',  labelsize=60)
ax.yaxis.set_major_locator(ticker.MaxNLocator(nbins =9))
ax.set_xticks(np.arange(0,9,1))
ax.grid(False)
#plt.savefig(r'...')


#The visualisation format for the ML-models is the spectrogram. We use NFFT =85 to make the small beating patterns visible.

fig = plt.figure(2)
ax = fig.add_subplot()
ax.set_xlabel(r'$\mathrm{time}\, [s]$',fontsize=60)
ax.set_ylabel(r'$\mathrm{frequency}\, [Hz]$',fontsize=60)
ax.yaxis.get_offset_text().set_fontsize(60)
ax.tick_params(axis='both',  labelsize=60)
ax.yaxis.set_major_locator(ticker.MaxNLocator(nbins =6))
ax.set_xticks(np.arange(0,9,1))
spectrum, freqs, t, im = plt.specgram(h_unlensedtime_numpy_window, noverlap=50, NFFT =85, Fs=1024) 
x = plt.pcolormesh(t, freqs,spectrum,alpha=0.35,shading= 'gouraud',cmap='viridis',vmax = spectrum.max()/2)


# We convert the wave in time domain to a WAV file which will be used for the YAMNET transfer learning model.

freq = np.linspace(0, 1024, 8193) 
time = np.linspace(0,8,8193)

h_unlensed = hp_unlensed.loc[i] - hc_unlensed.loc[i]*(0+1j)
h_unlensed = np.array(h_unlensed)

h_unlensedtime = np.fft.ifft(h_unlensed, norm = "ortho")

tau =0.05
window_scaled = (1-np.exp(-time/tau))*10**28

h_unlensedtime_scaled_window = h_unlensedtime.real*window_scaled
wavdata = h_unlensedtime_scaled_window.astype('int16')

from scipy.io import wavfile 
#wavfile.write(r'C:\...\...'+'.wav', 1024,wavdata)




